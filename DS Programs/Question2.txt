/*Create a class SET and include functions to perform
 * Set operations on Sets:
 * Subset, Union, Intersection ,Complement, Set Difference, Symmetric Difference
 * and Cartesian Product. WAP which takes sets from user
 * this class.
 */
#include<iostream>
using namespace std;
void Subset(int array[],int s)
    {
        int m=s,i,j,k;
        for( i=0;i<m;i++)
        {
            int size=0,q=1,n=0;
            if(i>0){
            for(j=1;j<=m-i;j++)
            size+=j;}
            else
            size=m;
            for( j=0;j<size;j++){
                if(j>0)
                cout<<",";
                cout<<"{";
            int p=0,ind=0;
             if(q==m){
             n++;
            q=n;
            q++;
            }
        if(i==0)
        cout<<array[j];
        else
        cout<<array[n];
            while(p<i)
            {   cout<<",";
                cout<<array[q++];
               if(p==0)
               ind=q-1;
                p++;
                
              }
              if(q<m)
              for( k=0;k<m;k++){
                if(array[ind]==array[k])
                {
                    q=k+1;
                    break;
                }
            }
            cout<<"}";
        }
        cout<<endl;
     }
    }
    void Union(int a[],int b[])
    {
  int x=0,s=0,u=0;
  while(a[s]!='\0')
  s++;
  while(b[u]!='\0')
  u++;
  x=s+u;
  int *array,p=0;
   array=new int[x];
  for(int i=0;i<s;i++)
  {
      array[p++]=a[i];  
    }
    for(int j=0;j<u;j++)
    {
        array[p++]=b[j];
    }
    
    cout<<"{";
    for(int i=0;i<x;i++){
    cout<<array[i]<<" ";
    if(i>0&&i<x-1)
    cout<<",";
}
cout<<"}";
}
void Intersection(int a[],int b[])
{
    int size=0,s=0,u=0;
    while(a[s]!='\0')
    s++;
    while(b[u]!='\0')
    u++;
    if(s>u){
    for(int i=0;i<s;i++)
    {
        int p=a[i];
        int indicator=0;
        for(int k=i-1;k>=0;k--)
        {
            if(p==a[k])
            indicator=1;
        }
        if(indicator==0)
        for(int j=0;j<u;j++)
        {
            if(p==b[j])
            {
                size++;
                break;
            }
        }
    }
    int *array,t=0;
    array=new int[size];
    for(int i=0;i<s;i++)
    {
        int q=a[i];
        int indicator=0;
        for(int k=i-1;k>=0;k--)
        {
            if(q==a[k])
            {
                indicator=1;
            }
        }
        if(indicator==0)
        for(int j=0;j<u;j++)
        {
            if(q==b[j])
            {
           array[t++]=q;
           break;
        }
    }
}
for(int i=0;i<size;i++)
{
    cout<<array[i];
}
    }else
    {
       for(int i=0;i<u;i++)
       {
           int p=b[i];
           int indicator=0;
           for(int k=i-1;k>=0;k--)
           {
               if(p==b[k])
               indicator=1;
            }
            if(indicator==0)
           for(int j=0;j<s;j++)
           {
               if(p==a[j])
               {
                   size++;
                   break;
                }
            }
        }
        int s=0,*array;
		array=new int[size];
        for(int i=0;i<u;i++)
        {
            int q=b[i];
            int indicator=0;
            for(int k=i-1;k>=0;k--)
            {
                if(q==b[k])
                indicator=1;
            }
            if(indicator==0)
            for(int j=0;j<s;j++)
            {
                if(q==a[j])
                array[s++]=q;
            }
        }
        cout<<"{";
        for(int i=0;i<size;i++){
        cout<<array[i]+" ";
        if(i>0&&i<size-1)
        cout<<",";
    }
    cout<<"}";
}
    }
    void Complement(int a[],int b[])
    {
       int s=0,u=0;
       while(a[s]!='\0')
       s++;
       while(b[u]!='\0')
       u++;
        cout<<"{";
            for(int i=0;i<u;i++)
            {
                int p=b[i];
                int indicator=0;
                for(int j=0;j<s;j++)
                {
                    if(p==a[j])
                    indicator=1;
                }
                if(indicator==0){
				
                cout<<b[i];
                cout<<",";
            }
            }
            cout<<"}"<<endl;
                    
    }
    void SetDifference(int a[],int b[])
    {
    	int s=0,u=0;
    	while(a[s]!='\0')
    	s++;
    	while(b[u]!='\0')
    	u++;
        for(int i=0;i<s;i++)
        {
            int p=a[i],indicator=0;
            for(int j=0;j<u;j++)
            {
                if(p==b[j])
                indicator=1;
            }
            if(indicator==0)
            cout<<a[i]<<endl;
        }
    }
    void SymmetricDifference(int a[],int b[])
    {
    	
        int x=0,s=0,u=0;
        while(a[s]!='\0')
        s++;
        while(a[s]!='\0')
        s++;
        while(b[u]!='\0')
        u++;
        x=s+u;
        int q=0,*array;
        array=new int[x];
        for(int i=0;i<s;i++)
        {
          array[q++]=a[i];
        }
        for(int j=0;j<u;j++)
        array[q++]=b[j];
        cout<<"{";
        for(int i=0;i<x;i++)
        {
            int p=array[i],indicator=0,ind=0;
            for(int k=0;k<s;k++)
            if(p==a[k])
            indicator=1;
            for(int j=0;j<u;j++)
            if(p==b[j])
            ind=1;
            if(indicator==0||ind==0)
        cout<<p;
        if(i<x-1)
        cout<<",";
        }
        cout<<"}"<<endl;
    }
   void CartesianProduct(int a[],int b[])
   {
   	int s=0,u=0;
   	while(a[s]!='\0')
   	s++;
   	while(b[u]!='\0')
   	u++;
       cout<<"{";
       for(int i=0;i<s;i++)
       {
           int p=a[i];
          
           for(int j=0;j<u;j++)
           {
               if(j>0&&j<u-1)
               cout<<",";
               cout<<"("<<a[i]<<","<<b[j]<<")";
            }
        }
        cout<<"}"<<endl;
}
int main()
{
    
    cout<<"Enter size of the first set and second set respectively \n";
    int m;
    cin>>m;
  int n;
  cin>>n;
  int *set1,*set2;
  set1=new int[m];
  set2=new int[n];
    cout<<"THANKS! Please now Enter "<<m<<" elments of first  set \n";
    for(int i=0;i<m;i++)
    cin>>set1[i];
    cout<<"THANKS! Please now Enter "<<n<<" elements of second  set\n";
   for(int i=0;i<n;i++)
   cin>>set2[i];
   while(1){
   cout<<"Enter 1: for SUBSET->\n";
   cout<<"Enter 2: for UNION->\n";
   cout<<"Enter 3: for INTERSECTION->\n";
   cout<<"Enter 4: for COMPLEMENT->\n";
   cout<<"Enter 5: for SET_DIFFERENCE->\n";
   cout<<"Enter 6: for SYMMETRIC_DIFFERENCE->\n";
   cout<<"Enter 7: for CARTESIAN_PRODUCT->\n";
   int choice;
   cin>>choice;
   switch(choice){
       case 1:
       cout<<"SUBSET OF YOUR FIRST SET IS \n";
       Subset(set1,m);
       cout<<"SUBSET OF YOUR SECOND SET IS \n";
       Subset(set2,n);
       break;
       case 2:
       cout<<"UNION OF YOUR SET IS \n";
       Union(set1,set2);
       break;
       case 3:
       cout<<"INTERSECTION OF YOUR SET IS \n";
       Intersection(set1,set2);
       break;
       case 4:
       cout<<"COMPLEMENT OF YOUR SET IS \n";
       Complement(set1,set2);
       break;
       case 5:
       cout<<"SET_DIFFERENCE OF YOUR SET IS\n ";
       SetDifference(set1,set2);
       break;
       case 6:
       cout<<"SYMMETRIC_DIFFERENCE IS\n ";
       SymmetricDifference(set1,set2);
       break;
       case 7:
       cout<<"YOUR CARTESIAN PRODUCT IS\n ";
       CartesianProduct(set1,set2);
       break;
       default:cout<<"WRONG CHOICE !";
    }
    cout<<"Inter 0 for EXIT";
    int num;
    cin>>num;
    if(num==0)
    break;
}
}


       
   
        
