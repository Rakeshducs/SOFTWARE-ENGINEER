/*Create a class Relation ,use Matrix notation to represent a relation .Include functions to check if a relation is reflexive ,symmetrix ,anti-symmetric ,transitive .to generate reflexive closure 
of relation .WAP to use this class*/
#include<iostream>
using namespace std;
void reflexive(int **m,int size)
{
	int p=0;
	for(int i=0;i<size;i++)
	for(int j=0;j<size;j++)
	if(i==j)
	if(m[i][j]==0)	
	{
		p=1;
		break;
	}
	if(p==0)
	cout<<"Your relation is reflexive\n";
	else
	cout<<"Your relation is not reflexive\n";
	}
	void symmetric(int **m,int size)
	{int p=0;
		for(int i=0;i<size;i++)
		for(int j=0;j<size;j++)
		if(m[i][j]==1&&m[j][i]==0)
		{
			p=1;
			break;
		}
		if(p==1)
		cout<<"Your relation is not symmetric\n";
		else
		cout<<"Your relation is symmetric\n";
	}
	void anti_symmetric(int **m,int size)
	{
		int p=0;
		for(int i=0;i<size;i++)
		for(int j=0;j<size;j++)
		if(m[i][j]==1&&m[j][i]==0)
		{
			p=1;
			break;
		}
		if(p==1)
		cout<<"Your relation is anti-symmetric\n";
		else
		cout<<"Your relation is not anti-symmetric\n";
		
	}
	void transitive(int **m,int size,int n)
	{
		
	  int i,j,t,k,p,q,a=0,b=0,c=0;
	    double r=(double)n/3,indi=0.0;
	    for(i=0;i<size;i++)
	    {
	        for(j=0;j<size;j++)
	        {
	            if(m[i][j]==1)
	            {
	                    a=i+1;
	                b=j+1;
	                for(t=0;t<size;t++)
	                {
	                    for(k=0;k<size;k++)
	                    {
	                        if(m[t][k]==1&&(b-1)==t)
	                        {
	                            c=k+1;
	                           
	                            for(p=0;p<size;p++)
	                            {
	                                for(q=0;q<size;q++)
	                                {
	                                  
	                                    if(m[p][q]==1&&(a-1)==p&&(c-1)==q)
	                                    {
	                                        indi++;
	                                       
	                                        break;
	                                       }
	                                      
	                                    }
	                               }
	                              break; 
	                           }
	                       }
	                   }
	               }
	           }
	       }
	       
	       if(indi==r)
	       cout<<"Your relation is transitive\n";
	       else
	       cout<<"your relation is not transitive\n";
	                            
	   }
			
			int main()
			{
				int *set;
				int size,i,a=0,b=0;
				while(1)
				{
				
				cout<<"Enter the size of the set\n";
				cin>>size;
				set=new int[size];
				cout<<"Enter "<<size<<" elements of set\n";
				for(i=0;i<size;i++)
				cin>>set[i];
				cout<<"Your set is \n";
				cout<<"{";
				for(i=0;i<size;i++)
				{
					if(i>0)
					cout<<",";
					cout<<set[i];
				}
				cout<<"}\n";
				cout<<"Enter Number of pairs of relations\n";
				int n;
				cin>>n;
				int *relation;
				relation=new int[n*2];
				cout<<"Enter "<<n<<" pairs of relation\n";
				for(i=0;i<n*2;i++)
				cin>>relation[i];
				cout<<"Your relation is \n";
				cout<<"{";
				for(i=0;i<n*2-1;i+=2)
				{
				    if(i>0&&i<n*2-2){
					cout<<",";
				} int s=i+1;
				    cout<<"("<<relation[i]<<","<<relation[s]<<")";
				}
			cout<<"}\n";

				 int **matrix=new int*[size];
				 for(i=0;i<size;i++)
				 matrix[i]=new int[size];
				 for(i=0;i<size;i++)
				 for(a=0;a<size;a++)
				 matrix[i][a]=0;
				  for(i=0;i<n*2-1;i++)
				 {
				 	a=relation[i];
				 	b=relation[++i];
				 matrix[a-1][b-1]=1;
				 	
				 }
				 cout<<"Matrix representation of relation\n";
				 for(i=0;i<size;i++)
				 {
				 	for(a=0;a<size;a++)
				 	cout<<matrix[i][a];
				 	cout<<endl;
				 }
				 cout<<"PLeae Enter Your choice!\n";
				 cout<<"ENTER 1: to check reflexive relation\n";
				 cout<<"ENTER 2: to check Symmetric relation\n";
				 cout<<"ENTER 3: to check anti-symmetric relation\n";
				 cout<<"ENTER 4: to check transitive relation\n";
				 int choice;
				 cin>>choice;
				 switch(choice){
				 	case 1:
				 		reflexive(matrix,size);
				 		break;
				 		case 2:
				 			symmetric(matrix,size);
				 			break;
				 			case 3:
				 				anti_symmetric(matrix,size);
				 				break;
				 				case 4:
				 					transitive(matrix,size,n);
				 					break;
				 					default:
				 						cout<<"WRONG CHOICE!\n";
				 }
				 cout<<"ENTER ZERO TO EXIT\n";
				 int exit;
				 cin>>exit;
				 if(exit==0)
				 break;
			}
				 }
			