/* Question 9:- WAP for binary search a) using recursion , b) without recursion.*/
#include<iostream>
using namespace std;
void withoutRec(int *a,int b)
{
	int size=0;
	while(a[size]!='\0')
	size++;
	int L=0,U=size-1,M;
	while(L<=U)
	{
		M=(L+U)/2;
		if(b==a[M]){
		cout<<"Your element is present at position "<<(M+1);
		break;}
		else if(b<a[M])
		U=M-1;
		else
		L=M+1;
	}
	
}
int withRec(int *a,int b,int L,int U)
{
	if(b==a[(L+U)/2])
	return ((L+U)/2+1);
	else if(b>a[(L+U)/2])
	return withRec(a,b,(L+U)/2+1,U);
	else
	return withRec(a,b,L,(L+U)/2-1);
}

int main()
{
	cout<<"Enter the size of the array\n";
	int size,L,U,p=0;
	cin>>size;
	L=0,U=size-1;
	int *array;
	array=new int[size];
	cout<<"Enter "<<size<<" elements of array\n";
	for(int i=0;i<size;i++)
	cin>>array[i];
	cout<<"Enter which number position you want to search\n";
	int num;
	cin>>num;
	cout<<"Enter Your choice!\n";
	cout<<"ENTER 1: FOR WITHOUT RECURSION!\n";
	cout<<"ENTER 2: FOR USING RECURSION!\n";
	int choice;
	cin>>choice;
	switch(choice){
		case 1: withoutRec(array,num);
		break;
		case 2: 
		 p=withRec(array,num,L,U);
		cout<<"Your element is present at position "<<p;
	break;
	default:
	cout<<"WRONG CHOICE!\n";	
			
	}
	
}